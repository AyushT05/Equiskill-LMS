const {
    GoogleGenerativeAI,
    HarmCategory,
    HarmBlockThreshold,
  } = require("@google/generative-ai");
  
  const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY;
  const genAI = new GoogleGenerativeAI(apiKey);
  
  const model = genAI.getGenerativeModel({
    model: "gemini-2.0-flash",
  });
  
  const generationConfig = {
    temperature: 1,
    topP: 0.95,
    topK: 40,
    maxOutputTokens: 8192,
    responseMimeType: "application/json",
  };
  

    export const GenerateCourseLayout_AI = model.startChat({
      generationConfig,
      history: [
        {
          role: "user",
          parts: [
            {text: "Generate a Course Tutorial on Following Details With field as Course Name,Description,Along with Chapter Name,about,Duration: Category: '12th Class', Topic: Physics Description:Units and Measurements, Level:Basic, Duration:1 hours, NoOfChapters:5, in JSON format\n"},
          ],
        },
        {
          role: "model",
          parts: [
            {text: "```json\n{\n  \"Name\": \"Physics Fundamentals: Units and Measurements\",\n  \"Description\": \"A foundational course designed to introduce 12th-grade students to the fundamental concepts of Units and Measurements in Physics. This course covers the importance of accurate measurement, different systems of units, dimensional analysis, and error analysis, providing a solid understanding for further study in physics.\",\n  \"Category\": \"12th Class\",\n  \"Topic\": \"Physics: Units and Measurements\",\n  \"Level\": \"Basic\",\n  \"Duration\": \"1 hours\",\n  \"NoOfChapters\": 5,\n  \"Chapters\": [\n    {\n      \"Chapter Name\": \"Introduction to Measurement\",\n      \"About\": \"This chapter introduces the fundamental concepts of measurement, its importance in physics, and the different types of physical quantities.\",\n      \"Duration\": \"10 minutes\",\n      \"Content\": [\n        \"What is Measurement?\",\n        \"Importance of Measurement in Physics\",\n        \"Types of Physical Quantities (Fundamental and Derived)\",\n        \"Need for Standard Units\"\n      ]\n    },\n    {\n      \"Chapter Name\": \"Systems of Units\",\n      \"About\": \"This chapter explores various systems of units used throughout history and focuses on the modern International System of Units (SI).\",\n      \"Duration\": \"15 minutes\",\n      \"Content\": [\n        \"Historical Systems of Units (CGS, FPS, MKS)\",\n        \"International System of Units (SI): Base Units and Definitions\",\n        \"SI Prefixes and their usage\",\n        \"Conversion of Units between different systems\"\n      ]\n    },\n    {\n      \"Chapter Name\": \"Measurement of Length, Mass, and Time\",\n      \"About\": \"This chapter delves into the practical methods and instruments used for measuring fundamental quantities like length, mass, and time.\",\n      \"Duration\": \"15 minutes\",\n      \"Content\": [\n        \"Measurement of Length: Direct and Indirect Methods\",\n        \"Vernier Calipers and Screw Gauge\",\n        \"Measurement of Mass: Beam Balance and Electronic Balance\",\n        \"Measurement of Time: Clocks and Atomic Standard of Time\"\n      ]\n    },\n    {\n      \"Chapter Name\": \"Dimensional Analysis\",\n      \"About\": \"This chapter explains the concept of dimensional analysis and its applications in verifying the correctness of physical equations and deriving relationships between physical quantities.\",\n      \"Duration\": \"15 minutes\",\n      \"Content\": [\n        \"Dimensions of Physical Quantities\",\n        \"Dimensional Formulae of Common Physical Quantities\",\n        \"Principle of Homogeneity of Dimensions\",\n        \"Applications of Dimensional Analysis (Checking correctness of equations, deriving relationships)\"\n      ]\n    },\n    {\n      \"Chapter Name\": \"Errors in Measurement and Significant Figures\",\n      \"About\": \"This chapter discusses the types of errors that can occur during measurements and the concept of significant figures in representing measured values.\",\n      \"Duration\": \"15 minutes\",\n      \"Content\": [\n        \"Types of Errors (Systematic and Random Errors)\",\n        \"Absolute Error, Relative Error, and Percentage Error\",\n        \"Significant Figures and Rules for Determining Significant Figures\",\n        \"Arithmetic Operations with Significant Figures (Addition, Subtraction, Multiplication, Division)\",\n        \"Accuracy and Precision\"\n      ]\n    }\n  ]\n}\n```\n"},
          ],
        },
      ],
    });

    export const GenerateChapterContent_AI = model.startChat({
      generationConfig,
      history: [
        {
          role: "user",
          parts: [
            {text: "explain the concept in Detail on Topic: Python Basic,CHapter:Variable and Data Types,in JSON Format with list of array with field as title, explanation on given chapter in detail, Code Example(Code field in <precode> format) if applicable\n"},
          ],
        },
        {
          role: "model",
          parts: [
            {text: "```json\n[\n  {\n    \"title\": \"Introduction to Variables and Data Types in Python\",\n    \"explanation\": \"Variables are fundamental building blocks in any programming language, including Python. They are used to store data within a program's memory.  Data types classify the kind of values a variable can hold (e.g., numbers, text, boolean values). Understanding variables and data types is crucial for writing effective and reliable Python code.\",\n    \"code_example\": null\n  },\n  {\n    \"title\": \"What is a Variable?\",\n    \"explanation\": \"In essence, a variable is a named storage location in memory. You can think of it as a container that holds a specific value. In Python, you don't need to explicitly declare the data type of a variable. Python is dynamically typed, meaning the data type is determined at runtime based on the value assigned to the variable. Variable names are case-sensitive (e.g., `myVariable` and `myvariable` are different variables).\",\n    \"code_example\": null\n  },\n  {\n    \"title\": \"Variable Naming Rules\",\n    \"explanation\": \"Python has specific rules for naming variables:\\n\\n*   **Start with a letter or underscore:** Variable names must begin with a letter (a-z, A-Z) or an underscore (_).\\n*   **Contain letters, numbers, or underscores:** After the first character, variable names can contain letters, numbers (0-9), and underscores.\\n*   **Case-sensitive:** As mentioned earlier, variable names are case-sensitive.\\n*   **Reserved keywords:**  You cannot use Python's reserved keywords (e.g., `if`, `else`, `for`, `while`, `def`, `class`, `import`, `return`, `True`, `False`, `None`, etc.) as variable names.\",\n    \"code_example\": null\n  },\n  {\n    \"title\": \"Assigning Values to Variables\",\n    \"explanation\": \"The assignment operator (`=`) is used to assign a value to a variable.  The value on the right-hand side of the operator is assigned to the variable on the left-hand side.\",\n    \"code_example\": {\n      \"code\": \"<pre># Assigning an integer\\nage = 30\\n\\n# Assigning a string\\nname = \\\"Alice\\\"\\n\\n# Assigning a floating-point number\\nprice = 19.99\\n\\n# Assigning a boolean value\\nis_student = True\\n\\nprint(age)\\nprint(name)\\nprint(price)\\nprint(is_student)</pre>\"\n    }\n  },\n  {\n    \"title\": \"Common Data Types in Python\",\n    \"explanation\": \"Python offers several built-in data types, including:\\n\\n*   **Integers (int):** Whole numbers, both positive and negative, without any decimal points (e.g., 10, -5, 0).\\n*   **Floating-point numbers (float):** Numbers with decimal points (e.g., 3.14, -2.5, 0.0).\\n*   **Strings (str):** Sequences of characters enclosed in single quotes (`'...'`) or double quotes (`\\\"...\\\"`) (e.g., \\\"Hello\\\", 'Python').\\n*   **Booleans (bool):** Represent truth values: `True` or `False`.\\n*   **Lists (list):** Ordered collections of items, enclosed in square brackets (`[...]`). Lists can contain elements of different data types.\\n*   **Tuples (tuple):** Ordered, *immutable* (cannot be changed after creation) collections of items, enclosed in parentheses (`(...)`).\\n*   **Dictionaries (dict):** Unordered collections of key-value pairs, enclosed in curly braces (`{...}`). Keys must be unique and immutable (e.g., strings or numbers).\\n*   **Sets (set):** Unordered collections of unique elements, enclosed in curly braces (`{...}`).  Sets are useful for removing duplicates from a collection.\",\n    \"code_example\": null\n  },\n  {\n    \"title\": \"Integer (int)\",\n    \"explanation\": \"Integers represent whole numbers. You can perform arithmetic operations (addition, subtraction, multiplication, division) on integers.\",\n    \"code_example\": {\n      \"code\": \"<pre>x = 10\\ny = -5\\n\\nsum_result = x + y  # 5\\ndifference = x - y # 15\\nproduct = x * y    # -50\\n\\nprint(sum_result)\\nprint(difference)\\nprint(product)</pre>\"\n    }\n  },\n  {\n    \"title\": \"Floating-Point (float)\",\n    \"explanation\": \"Floats represent numbers with decimal points.  Arithmetic operations are also supported for floats.\",\n    \"code_example\": {\n      \"code\": \"<pre>pi = 3.14159\\nradius = 5.0\\n\\narea = pi * radius * radius\\n\\nprint(area) </pre>\"\n    }\n  },\n  {\n    \"title\": \"String (str)\",\n    \"explanation\": \"Strings represent text. You can use single quotes or double quotes to define a string.  String manipulation is a common task in programming.  Strings are *immutable* in Python, meaning you cannot directly modify a string after it's created; you must create a new string.\",\n    \"code_example\": {\n      \"code\": \"<pre>message = \\\"Hello, World!\\\"\\nname = 'Python'\\n\\nprint(message)\\nprint(name)\\n\\n# String concatenation\\ngreeting = \\\"Hello, \\\" + name + \\\"!\\\"\\nprint(greeting)</pre>\"\n    }\n  },\n  {\n    \"title\": \"Boolean (bool)\",\n    \"explanation\": \"Booleans represent truth values: `True` or `False`. They are commonly used in conditional statements (e.g., `if`, `else`) and logical operations.\",\n    \"code_example\": {\n      \"code\": \"<pre>is_valid = True\\nis_finished = False\\n\\nif is_valid:\\n    print(\\\"The value is valid.\\\")\\nelse:\\n    print(\\\"The value is invalid.\\\")\\n\\nif not is_finished:\\n    print(\\\"Processing...\\\")</pre>\"\n    }\n  },\n  {\n    \"title\": \"List (list)\",\n    \"explanation\": \"Lists are ordered, mutable (changeable) sequences of items.  Lists are defined using square brackets `[]`. Lists can contain items of different data types. Lists are very versatile and used extensively in Python programming. List indexing starts from 0.\",\n    \"code_example\": {\n      \"code\": \"<pre>my_list = [1, 2, \\\"apple\\\", 3.14, True]\\nprint(my_list[0]) # Output: 1\\nprint(my_list[2]) # Output: apple\\n\\nmy_list.append(\\\"banana\\\") # Add element to the end\\nprint(my_list)\\n\\nmy_list[1] = \\\"orange\\\" # Modify an element\\nprint(my_list)</pre>\"\n    }\n  },\n  {\n    \"title\": \"Tuple (tuple)\",\n    \"explanation\": \"Tuples are ordered, *immutable* sequences of items.  Tuples are defined using parentheses `()`.  Like lists, tuples can contain items of different data types. Tuples are often used to represent collections of related data that should not be modified.\",\n    \"code_example\": {\n      \"code\": \"<pre>my_tuple = (1, 2, \\\"apple\\\", 3.14)\\nprint(my_tuple[0]) # Output: 1\\n\\n# Attempting to modify a tuple will raise an error:\\n# my_tuple[0] = 5  # TypeError: 'tuple' object does not support item assignment\\n\\nprint(my_tuple)</pre>\"\n    }\n  },\n  {\n    \"title\": \"Dictionary (dict)\",\n    \"explanation\": \"Dictionaries are unordered collections of key-value pairs.  Dictionaries are defined using curly braces `{}`.  Keys must be unique and immutable (e.g., strings, numbers, tuples). Values can be of any data type. Dictionaries are highly efficient for looking up values based on their keys.\",\n    \"code_example\": {\n      \"code\": \"<pre>my_dict = {\\n    \\\"name\\\": \\\"Bob\\\",\\n    \\\"age\\\": 25,\\n    \\\"city\\\": \\\"New York\\\"\\n}\\n\\nprint(my_dict[\\\"name\\\"])\\nprint(my_dict[\\\"age\\\"])\\n\\nmy_dict[\\\"occupation\\\"] = \\\"Engineer\\\"  # Add a new key-value pair\\nprint(my_dict)</pre>\"\n    }\n  },\n    {\n    \"title\": \"Set (set)\",\n    \"explanation\": \"Sets are unordered collections of unique elements. Sets are defined using curly braces `{}` or the `set()` constructor. Sets are useful for removing duplicate elements from a collection and performing set operations like union, intersection, and difference.\",\n    \"code_example\": {\n      \"code\": \"<pre>my_set = {1, 2, 2, 3, 4, 4, 5}\\nprint(my_set)  # Output: {1, 2, 3, 4, 5} (duplicates are removed)\\n\\nset1 = {1, 2, 3}\\nset2 = {3, 4, 5}\\n\\nunion_set = set1.union(set2)\\nprint(union_set)\\n\\nintersection_set = set1.intersection(set2)\\nprint(intersection_set)</pre>\"\n    }\n  },\n  {\n    \"title\": \"Type Conversion (Casting)\",\n    \"explanation\": \"Sometimes, you need to convert a value from one data type to another.  This is called type conversion or casting.  Python provides built-in functions for this purpose:\\n\\n*   `int()`: Converts a value to an integer.\\n*   `float()`: Converts a value to a floating-point number.\\n*   `str()`: Converts a value to a string.\\n*   `bool()`: Converts a value to a boolean.\",\n    \"code_example\": {\n      \"code\": \"<pre>x = \\\"10\\\"  # String\\ny = 3.14  # Float\\n\\nint_x = int(x)\\nfloat_x = float(x)\\nstr_y = str(y)\\nbool_x = bool(int_x)\\n\\nprint(int_x + 5)  # Integer addition\\nprint(float_x)\\nprint(str_y + \\\" is a float.\\\")\\nprint(bool_x) #any non zero integer is True</pre>\"\n    }\n  },\n  {\n    \"title\": \"Determining Data Type with `type()`\",\n    \"explanation\": \"You can use the `type()` function to determine the data type of a variable at runtime.\",\n    \"code_example\": {\n      \"code\": \"<pre>age = 30\\nname = \\\"Alice\\\"\\nprice = 19.99\\n\\nprint(type(age))   # Output: <class 'int'>\\nprint(type(name))  # Output: <class 'str'>\\nprint(type(price)) # Output: <class 'float'></pre>\"\n    }\n  }\n]\n```"},
          ],
        },
      ],
    });
  
    //const result = await chatSession.sendMessage("INSERT_INPUT_HERE");
    //console.log(result.response.text());
  